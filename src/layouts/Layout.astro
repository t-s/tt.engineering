---
import '@fontsource/inter/400.css';
import '@fontsource/inter/600.css';
import '@fontsource/inter/700.css';
import '@fontsource/inter/900.css';

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/png" href="/tt.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<!-- Mapbox -->
		<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />
		<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
	</head>
	<body>
		<canvas id="network-background"></canvas>
		
		<header>
			<nav>
				<div class="logo">
						<img src="/tt.png" alt="Timothy Technologies Logo" class="logo-img">
						<span>Timothy Technologies</span>
					</div>
				<ul>
					<li><a href="#services">Services</a></li>
					<li><a href="#about">About</a></li>
					<li><a href="#contact">Contact</a></li>
				</ul>
			</nav>
		</header>

		<slot />

		<footer>
			<div class="footer-content">
				<p>Timothy Technologies, &copy; MMXXV &middot; Built with <a href="https://astro.build" target="_blank" rel="noopener noreferrer" class="astro-link">Astro</a></p>
				<div class="social-links">
					<a href="https://github.com/t-s" target="_blank" rel="noopener noreferrer" class="social-link" aria-label="GitHub">
						<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="social-icon"><path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path></svg>
					</a>
					<a href="https://linkedin.com/in/timsidie" target="_blank" rel="noopener noreferrer" class="social-link" aria-label="LinkedIn">
						<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="social-icon"><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2a2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect x="2" y="9" width="4" height="12"></rect><circle cx="4" cy="4" r="2"></circle></svg>
					</a>
				</div>
			</div>
		</footer>
		<script>
			// Network Animation
			document.addEventListener('DOMContentLoaded', function() {
				const canvas = document.getElementById('network-background');
				const ctx = canvas.getContext('2d');
				
				// Set canvas dimensions to match document height exactly
				function resizeCanvas() {
					canvas.width = window.innerWidth;
					canvas.height = document.body.scrollHeight;
				}
				
				// Call once to initialize
				resizeCanvas();
				
				// Resize canvas when window size changes or content updates
				window.addEventListener('resize', function() {
					// Clear existing particles
					particles.length = 0;
					// Update mobile detection
					const wasMobile = isMobile;
					isMobile = window.innerWidth < 768;
					// Only recreate particles if screen size category changed (mobile/desktop)
					resizeCanvas();
					createParticles();
					
					// Reset connections on mobile resize
					if (isMobile) {
						connections.length = 0;
					}
				});
				// Also update canvas height when DOM content changes
				setTimeout(resizeCanvas, 100); // Check again after page has started loading
				setTimeout(resizeCanvas, 500); // Check again after page has fully loaded
				setTimeout(resizeCanvas, 1000); // Final check for any dynamic content
				
				// Node properties - adjust based on screen size
				let isMobile = window.innerWidth < 768;
				const particleCount = isMobile ? 25 : 150; // Significantly fewer particles on mobile (50% reduction)
				const connectionDistance = isMobile ? 300 : 250; // Much longer connections on mobile for more visibility
				const particles = [];
				// Store persistent connections for mobile to prevent flickering
				const connections = [];
				// Frame counter for throttling connection updates
				let frameCount = 0;
				
				// Create particles that distribute across the entire page height
				function createParticles() {
					// For mobile, ensure we distribute particles evenly throughout the document
					// For desktop, use the more sophisticated distribution
					
					if (isMobile) {
						// Simple distribution: divide document into sections and ensure particles in each
						const numSections = Math.ceil(document.body.scrollHeight / (window.innerHeight / 2));
						const particlesPerSection = Math.ceil(particleCount / numSections);
						
						for (let section = 0; section < numSections; section++) {
							const sectionHeight = document.body.scrollHeight / numSections;
							const sectionStartY = section * sectionHeight;
							const sectionEndY = (section + 1) * sectionHeight;
							
							const sectionParticles = section === numSections - 1 ? 
								particleCount - (section * particlesPerSection) : 
								particlesPerSection;
								
							for (let i = 0; i < sectionParticles; i++) {
								particles.push({
									x: Math.random() * canvas.width,
									y: sectionStartY + Math.random() * (sectionEndY - sectionStartY),
									size: Math.random() * 3.0 + 3.0, // Much larger particles on mobile
									speedX: Math.random() * 0.25 - 0.125, // Slower particles on mobile
									speedY: Math.random() * 0.25 - 0.125,
									color: '#000000'
								});
							}
						}
					} else {
						// Desktop distribution
						const visibleSections = Math.max(1, Math.ceil(canvas.height / window.innerHeight));
						
						for (let i = 0; i < particleCount; i++) {
							// Choose random section with bias toward visible area
							const section = Math.floor(Math.random() * visibleSections);
							const sectionStartY = section * window.innerHeight;
							const sectionEndY = Math.min(canvas.height, (section + 1) * window.innerHeight);
							
							particles.push({
								x: Math.random() * canvas.width,
								y: sectionStartY + Math.random() * (sectionEndY - sectionStartY),
								size: Math.random() * 3 + 2.5,
								speedX: Math.random() * 0.3 - 0.15,
								speedY: Math.random() * 0.3 - 0.15,
								color: '#000000'
							});
						}
					}
				}
				
				// Draw particles and connections
				function drawParticles() {
					ctx.clearRect(0, 0, canvas.width, canvas.height);
					frameCount++; // Increment frame counter
					
					// We'll use the scroll position to track where we are in the document,
					// but will render nodes regardless of visibility for persistence
					const scrollTop = window.pageYOffset;
					const viewportBottom = scrollTop + window.innerHeight;
					
					if (isMobile) {
						// MOBILE: Use persistent connections to prevent flickering
						
						// Only update connections every 60 frames to prevent flickering
						// This means connection updates happen about once every 1 second
						if (frameCount % 60 === 0 || connections.length === 0) {
							// Clear old connections array but keep capacity
							connections.length = 0;
							
							// Build new set of connections
							for (let i = 0; i < particles.length; i++) {
								const p1 = particles[i];
								
								for (let j = i + 1; j < particles.length; j++) {
									const p2 = particles[j];
									const distance = Math.sqrt(
										Math.pow(p1.x - p2.x, 2) + 
										Math.pow(p1.y - p2.y, 2)
									);
									
									// Only create connections that are within range
									// And apply one-time filter to reduce density (skip 25%)
									if (distance < connectionDistance && Math.random() > 0.25) {
										connections.push({
											from: i,
											to: j,
											opacity: 1 - (distance / connectionDistance)
										});
									}
								}
							}
						}
						
						// Draw all persistent connections with current particle positions
						for (let i = 0; i < connections.length; i++) {
							const conn = connections[i];
							const p1 = particles[conn.from];
							const p2 = particles[conn.to];
							
							// Recalculate current distance to update opacity
							const distance = Math.sqrt(
								Math.pow(p1.x - p2.x, 2) + 
								Math.pow(p1.y - p2.y, 2)
							);
							
							// Only draw if still in range (prevent extremely long connections)
							if (distance < connectionDistance * 1.5) {
								// Draw connection with opacity based on current distance
								const opacity = 1 - (distance / connectionDistance);
								
								ctx.beginPath();
								ctx.moveTo(p1.x, p1.y);
								ctx.lineTo(p2.x, p2.y);
								ctx.strokeStyle = `rgba(0, 0, 0, ${opacity * 1.0})`;
								ctx.lineWidth = 2.0; // Thicker connections on mobile
								ctx.stroke();
							}
						}
					} else {
						// DESKTOP: Draw connections dynamically
						for (let i = 0; i < particles.length; i++) {
							const p = particles[i];
							
							// Skip particles very far outside the visible area on desktop
							if (p.y < scrollTop - 600 || p.y > viewportBottom + 600) {
								continue;
							}
							
							// Check for connections
							for (let j = i + 1; j < particles.length; j++) {
								const p2 = particles[j];
								const distance = Math.sqrt(
									Math.pow(p.x - p2.x, 2) + 
									Math.pow(p.y - p2.y, 2)
								);
								
								if (distance < connectionDistance) {
									// Draw connection with opacity based on distance
									ctx.beginPath();
									ctx.moveTo(p.x, p.y);
									ctx.lineTo(p2.x, p2.y);
									const opacity = 1 - (distance / connectionDistance);
									ctx.strokeStyle = `rgba(0, 0, 0, ${opacity * 0.9})`;
									ctx.lineWidth = 1.5;
									ctx.stroke();
								}
							}
						}
					}
					
					// Then draw the particles over the connections
					for (let i = 0; i < particles.length; i++) {
						const p = particles[i];
						
						// For mobile, we don't skip any particles regardless of position
						// For desktop, skip particles far from viewport
						if (!isMobile && (p.y < scrollTop - 600 || p.y > viewportBottom + 600)) {
							continue;
						}
						
						ctx.beginPath();
						ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
						ctx.fillStyle = p.color;
						ctx.fill();
					}
				}
				
				// Update particle positions
				function updateParticles() {
					for (let i = 0; i < particles.length; i++) {
						const p = particles[i];
						
						// Move the particle (independent of scroll position)
						p.x += p.speedX;
						p.y += p.speedY;
						
						// Bounce off viewport edges
						if (p.x < 0 || p.x > canvas.width) p.speedX *= -1;
						if (p.y < 0 || p.y > canvas.height) p.speedY *= -1;
					}
				}
				
				// Animation loop
				function animate() {
					requestAnimationFrame(animate);
					drawParticles();
					updateParticles();
					
					// Check if we need to resize canvas due to content changes
					if (canvas.height !== document.body.scrollHeight) {
						resizeCanvas();
						// Redistribute particles if canvas was resized
						if (particles.length > 0) {
							particles.length = 0;
							createParticles();
							
							// Reset connections on resize
							if (isMobile) {
								connections.length = 0;
							}
						}
					}
				}
				
				// Initialize and start animation
				createParticles();
				animate();
			});

			// Initialize Mapbox Map (Glover Park, DC)
			document.addEventListener('DOMContentLoaded', function() {
				const mapElement = document.getElementById('map');
				
				if (mapElement) {
					// Mapbox API key
					mapboxgl.accessToken = 'pk.eyJ1IjoidHNpZGllIiwiYSI6ImNtOHpvd2o2dzBlMmcya29obnhuanh3MG4ifQ.pXw_5J7FDpgb_0Z2A4x_vw';
					
					const map = new mapboxgl.Map({
						container: 'map',
						style: 'mapbox://styles/mapbox/dark-v11', // Dark style as requested
						center: [-77.0741, 38.9200], // Glover Park, DC coordinates
						zoom: 14.5,
						attributionControl: true,
						interactive: true
					});
					
					// Add navigation controls
					map.addControl(new mapboxgl.NavigationControl(), 'top-right');
					
					// Wait for map to load before adding marker
					map.on('load', function() {
						// Add a marker for the location
						new mapboxgl.Marker({
							color: "#FF5B79" // Using the pink from the theme
						})
						.setLngLat([-77.0741, 38.9200])
						.addTo(map);
					});
					
					// Handle errors
					map.on('error', function(e) {
						console.error('Mapbox error: ', e.error);
						// Fallback to display error message in map container
						if (e.error && (e.error.status === 401 || e.error.status === 403)) {
							mapElement.innerHTML = `
								<div style="padding: 20px; text-align: center; color: white;">
									<h3 style="margin-bottom: 10px;">Mapbox API Key Required</h3>
									<p>To display the map, add your Mapbox API key in Layout.astro</p>
									<p style="font-size: 12px; margin-top: 15px;">Sign up for free at <a href="https://account.mapbox.com/auth/signup/" style="color: #FF5B79;">mapbox.com</a></p>
								</div>`;
						}
					});
					
					// Prevent scrolling on the map from triggering page scroll
					mapElement.addEventListener('wheel', event => {
						if (mapElement.contains(event.target)) {
							event.preventDefault();
						}
					});
				}
			});
		</script>
	</body>
</html>

<style is:global>
/* Bold Color Brutalism inspired by timothy.engineering */
:root {
    --tile1-bg: #5C62F9;      /* Vibrant blue-purple */
    --tile2-bg: #9747FF;      /* Rich purple */
    --tile3-bg: #FF8A3D;      /* Orange */
    --tile4-bg: #00C8B4;      /* Teal */
    --tile5-bg: #FF5B79;      /* Pink */
    --hero-bg: #1E90FF;       /* Darker blue */
    --custom-software-bg: #32CD32; /* Lime green */
    --header-bg: #151515;     /* Dark header */
    --background: #FFFFFF;    /* Clean white */
    --text-dark: #151515;     /* Dark text */
    --text-light: #FFFFFF;    /* Light text */
    --shadow: 8px 8px 0px rgba(0, 0, 0, 0.8); /* Bold shadow */
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Inter', sans-serif;
}

body {
    color: var(--text-dark);
    background-color: var(--background);
    line-height: 1.4;
    padding-top: 95px; /* Adjusted for desktop */
    position: relative;
    overflow-x: hidden;
}

#network-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; /* Match exactly the document height */
    z-index: -1;
    opacity: 0.8; /* Increased opacity for better visibility */
    pointer-events: none;
}

a {
    text-decoration: none;
    color: inherit;
    font-weight: 600;
}

/* Brutalist Header */
header {
    background-color: var(--header-bg);
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 100;
    box-shadow: 0 4px 0 rgba(0, 0, 0, 0.8);
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 2rem;
    max-width: 1400px;
    margin: 0 auto;
}

.logo {
    display: flex;
    align-items: center;
    font-size: 1.5rem;
    font-weight: 900;
    color: white;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.logo-img {
    height: 70px;
    margin-right: 15px;
}

nav ul {
    display: flex;
    list-style: none;
}

nav li {
    margin-left: 2rem;
}

nav a {
    color: white;
    font-weight: 700;
    text-transform: uppercase;
    position: relative;
    padding: 0.25rem 0;
}

nav a:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 3px;
    background-color: white;
    transition: width 0.3s ease;
}

nav a:hover:after {
    width: 100%;
}

/* Scroll Anchor Offset */
:target {
    scroll-margin-top: 120px; /* Increased by 10px for desktop */
}

/* Typography */
h1 {
    font-size: 3.0rem;
    font-weight: 900;
    margin-bottom: 1.5rem;
    line-height: 1.1;
    text-transform: uppercase;
}

h2, h3 {
    font-weight: 900;
    text-transform: uppercase;
}

h2 {
    font-size: 2.4rem;
    margin-bottom: 0.5rem;
}

h3 {
    font-size: 1.8rem;
    margin-bottom: 1rem;
}

p {
    font-size: 1.1rem;
    margin-bottom: 1.5rem;
    font-weight: 500;
}

/* Buttons */
.btn {
    display: inline-block;
    background-color: black;
    color: white;
    padding: 0.75rem 2rem;
    font-weight: 700;
    text-transform: uppercase;
    border: 3px solid black;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn:hover {
    background-color: white;
    color: black;
}

/* Footer */
footer {
    background-color: var(--header-bg);
    color: white;
    text-align: center;
    padding: 2rem;
    margin-top: 2rem;
    margin-bottom: 0;
    border-top: 4px solid black;
}

.footer-content {
    max-width: 1400px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.social-links {
    display: flex;
    gap: 3rem;
    margin-top: 0.5rem;
}

.social-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 60px;
    height: 60px;
    padding: 1rem;
    border: 2px solid white;
    border-radius: 50%;
    transition: all 0.2s ease;
}

.social-link:hover {
    background-color: white;
    color: var(--header-bg);
    transform: translateY(-5px);
}

.social-icon {
    transition: all 0.2s ease;
}

.social-link:hover .social-icon {
    stroke: var(--header-bg);
}

.astro-link {
    background-image: linear-gradient(90deg, #FF4545, #32CD32, #39B5FF, #FF4545);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    font-weight: 700;
    padding: 0 2px;
    transition: transform 0.3s ease;
    display: inline-block;
}

.astro-link:hover {
    transform: scale(1.1);
}

/* Responsive */
@media (max-width: 768px) {
    body {
        padding-top: 140px; /* Adjusted for mobile */
    }
    
    :target {
        scroll-margin-top: 170px; /* Increased by 10px for mobile */
    }
    
    nav {
        flex-direction: column;
        text-align: center;
    }
    
    nav ul {
        margin-top: 1rem;
    }
    
    nav li {
        margin: 0 1rem;
    }
    
    h1 {
        font-size: 2.2rem;
    }

    .footer-content {
        flex-direction: column;
        gap: 0.5rem;
    }

    .social-links {
        flex-direction: row;
        gap: 1.5rem;
        margin-top: 0.25rem;
    }
}
</style>